<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/30/2021 8:28:31 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CVPKHANGNHN"
  DTS:CreatorName="FSOFT.FPT.VN\KhangNHN"
  DTS:DTSID="{E4DCCACC-BFF9-4997-BE78-2C13011222C2}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="12"
  DTS:VersionGUID="{4C2FDD0A-D472-4729-9C61-BDA59415EB13}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create python sript to upload"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{91E865B5-16F0-4C7C-80F8-30171413FD58}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create python sript to upload"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_b929af78d1c54ee990186b15245b95cd"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::ServerName,$Project::SnowFlakeFilePath,$Project::SnowSQLConfigFilePath">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b929af78d1c54ee990186b15245b95cd.Properties.Settings.get_Default():ST_b929af78d1c54ee990186b15245b95cd.Properties.Sett" +
    "ings")]

namespace ST_b929af78d1c54ee990186b15245b95cd.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_b929af78d1c54ee990186b15245b95cd
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // Variables
            string snowflakeFolder = (string)Dts.Variables["$Project::SnowFlakeFilePath"].Value + "\\SQLToSnow";
            string uploadfilename = snowflakeFolder+"\\Upload2Snow.py";
            string configfile = (string)Dts.Variables["$Project::SnowSQLConfigFilePath"].Value + "\\config";
            string SQLServer = (string)Dts.Variables["$Project::ServerName"].Value;


            // Create folder to contain python script to upload and unload 
            if (System.IO.Directory.Exists(snowflakeFolder))
            {
                System.IO.Directory.Delete(snowflakeFolder, true);
                System.IO.Directory.CreateDirectory(snowflakeFolder);
            }
            else
                System.IO.Directory.CreateDirectory(snowflakeFolder);

            // Create python files
            // Upload
            { // Create a file to write to   
                using (StreamWriter sw = new StreamWriter(uploadfilename, false))
                {
                    sw.WriteLine("import time ");
                    sw.WriteLine("import pandas as pd ");
                    sw.WriteLine("import pyodbc ");
                    sw.WriteLine("import snowflake.connector ");
                    sw.WriteLine("from snowflake.connector.pandas_tools import write_pandas");
                    sw.WriteLine("import configparser ");
                    sw.WriteLine("t_start = time.time()");
                    sw.WriteLine("configf = (r\""+configfile+"\") ");
                    sw.WriteLine("parser = configparser.ConfigParser()");
                    sw.WriteLine("parser.read(configf)");
                    sw.WriteLine("User = parser.get(\"connections.Project02\", \"username\")");
                    sw.WriteLine("Account = parser.get(\"connections.Project02\", \"accountname\")");
                    sw.WriteLine("Password = parser.get(\"connections.Project02\", \"password\")");
                    sw.WriteLine("Role = parser.get(\"connections.Project02\", \"rolename\")");
                    sw.WriteLine("Database = parser.get(\"connections.Project02\", \"dbname\")");
                    sw.WriteLine("Datawarehouse = parser.get(\"connections.Project02\", \"warehousename\")");
                    sw.WriteLine("Schema = parser.get(\"connections.Project02\", \"schemaname\")");
                    sw.WriteLine("### connect to SQL Server");
                    sw.WriteLine("conn = pyodbc.connect(\"Driver={SQL Server};\"");
                    sw.WriteLine("                      \"Server="+SQLServer+";\"");
                    sw.WriteLine("                      \"Database=GamingGroup6;\"");
                    sw.WriteLine("                      \"Trusted_Connection=yes;\")");
                    sw.WriteLine("cursor = conn.cursor()");
                    sw.WriteLine("df_country = pd.read_sql_query(\"SELECT * FROM GameBI.CountryDetails\",conn)");
                    sw.WriteLine("df_country.ModifiedDate = df_country.ModifiedDate.apply(lambda x: x.strftime(\'%Y-%m-%d %H:%M:%S\')) ");
                    sw.WriteLine("df_user = pd.read_sql_query(\"SELECT * FROM GameBI.UserInfo\",conn)");
                    sw.WriteLine("df_user.ModifiedDate = df_user.ModifiedDate.apply(lambda x: x.strftime(\'%Y-%m-%d %H:%M:%S\')) ");
                    sw.WriteLine("df_game = pd.read_sql_query(\"SELECT * FROM GameBI.GameDetails\",conn)");
                    sw.WriteLine("df_game.ModifiedDate = df_game.ModifiedDate.apply(lambda x: x.strftime(\'%Y-%m-%d %H:%M:%S\')) ");
                    sw.WriteLine("df_transaction = pd.read_sql_query(\"SELECT * FROM GameBI.Transactions\",conn)");
                    sw.WriteLine("df_transaction.ModifiedDate = df_transaction.ModifiedDate.apply(lambda x: x.strftime(\'%Y-%m-%d %H:%M:%S\')) ");
                    sw.WriteLine("## close connection with sql ");
                    sw.WriteLine("conn.close()");
                    sw.WriteLine("## conect to snow sql");
                    sw.WriteLine("scnn = snowflake.connector.connect(user = User, password = Password, ");
                    sw.WriteLine("                                   account = Account, rolename = Role,");
                    sw.WriteLine("                                   database = Database, warehouse = Datawarehouse,");
                    sw.WriteLine("                                   schema = Schema)");
                    sw.WriteLine("cs = scnn.cursor()");
                    sw.WriteLine("  ");
                    sw.WriteLine("def call_truncate(cs, logfile, n_err):");
                    sw.WriteLine("    try:");
                    sw.WriteLine("        cs.execute(\'TRUNCATE TABLE GameBI.CountryDetails;\')");
                    sw.WriteLine("        cs.execute(\'TRUNCATE TABLE GameBI.GameDetails;\')");
                    sw.WriteLine("        cs.execute(\'TRUNCATE TABLE GameBI.UserInfo;\')");
                    sw.WriteLine("        cs.execute(\'TRUNCATE TABLE GameBI.Transactions;\')");
                    sw.WriteLine("    except snowflake.connector.errors.ProgrammingError as e:");
                    sw.WriteLine("        logfile.write(\'Error {0}  ({1}): {2}  ({3})+\\n\'.format(e.errno, e.sqlstate, e.msg, e.sfqid))");
                    sw.WriteLine("        n_err = n_err + 1");
                    sw.WriteLine("    return n_err");
                    sw.WriteLine(" ");
                    sw.WriteLine("def upload2snow(df, scnn, logfile, n_err, database, schema, table_name, tot_rows):");
                    sw.WriteLine("    success, n_chunks, n_rows = False, 0, 0 ");
                    sw.WriteLine("    try:");
                    sw.WriteLine("        success, n_chunks, n_rows, _ = write_pandas(scnn, df, table_name, ");
                    sw.WriteLine("                                            chunk_size=100, database=database, ");
                    sw.WriteLine("                                            schema = schema, quote_identifiers =False)");
                    sw.WriteLine("    except snowflake.connector.errors.ProgrammingError as e:");
                    sw.WriteLine("        logfile.write(\'Error {0}  ({1}): {2}  ({3})+\\n\'.format(e.errno, e.sqlstate, e.msg, e.sfqid))");
                    sw.WriteLine("        n_err = n_err + 1");
                    sw.WriteLine("    logfile.write(\'Load table status '+table_name+':{0} with {1} rows \\n\'.format(success, n_rows))");
                    sw.WriteLine("    return n_err, tot_rows+n_rows");
                    sw.WriteLine(" ");
                    sw.WriteLine("if __name__ == \'__main__\':");
                    sw.WriteLine("    n_err = 0");
                    sw.WriteLine("    total_rows = 0");
                    sw.WriteLine("    w = open( \'LogSnowUpload.log\',\'w\')");
                    sw.WriteLine("    n_err = call_truncate(cs, w, n_err)");
                    sw.WriteLine("    print(\'Loading data into SnowFlake ...\')");
                    sw.WriteLine("    n_err, total_rows = upload2snow(df_country, scnn, w, n_err, Database, Schema, \'CountryDetails\', total_rows)");
                    sw.WriteLine("    n_err, total_rows = upload2snow(df_game, scnn, w, n_err, Database, Schema, \'GameDetails\', total_rows)");
                    sw.WriteLine("    n_err, total_rows = upload2snow(df_user, scnn, w, n_err, Database, Schema, \'UserInfo\', total_rows)");
                    sw.WriteLine("    n_err, total_rows = upload2snow(df_transaction, scnn, w, n_err, Database, Schema, \'Transactions\', total_rows)");
                    sw.WriteLine("    scnn.close()");
                    sw.WriteLine("    print(\'Upload {2} rows done in {0:.2f} s with {1} errors\'.format((time.time()-t_start), n_err, total_rows))");
                    sw.WriteLine("    w.write(\'Upload {2} rows done in {0:.2f} s with {1} errors\'.format((time.time()-t_start), n_err, total_rows))");
                    sw.WriteLine("    w.close()");
                    sw.Close();
                }
            }

             
            



            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_b929af78d1c54ee990186b15245b95cd</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_b929af78d1c54ee990186b15245b95cd</msb:DisplayName>
    <msb:ProjectId>{C7A5745C-1C28-4DFE-A99D-A11A72BA357D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_b929af78d1c54ee990186b15245b95cd.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b929af78d1c54ee990186b15245b95cd")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b929af78d1c54ee990186b15245b95cd")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_b929af78d1c54ee990186b15245b95cd.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4d656ec9-f411-4976-91f7-28e18b3a2186}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_b929af78d1c54ee990186b15245b95cd</RootNamespace>
    <AssemblyName>ST_b929af78d1c54ee990186b15245b95cd</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b929af78d1c54ee990186b15245b95cd.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b929af78d1c54ee990186b15245b95cd.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b929af78d1c54ee990186b15245b95cd.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b929af78d1c54ee990186b15245b95cd.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b929af78d1c54ee990186b15245b95cd.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_b929af78d1c54ee990186b15245b95cd.dll">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
LjMwMzE5AAAAAAUAbAAAABAEAAAjfgAAfAQAANQFAAAjU3RyaW5ncwAAAABQCgAAKB8AACNVUwB4
KQAAEAAAACNHVUlEAAAAiCkAAIwBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEA
AAAjAAAABQAAAAYAAAAJAAAAAQAAACMAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABAAA
AAEAAAABAAAAAACoAwEAAAAAAAYAWgKeBAYA6QKeBAYApgGLBA8AEgUAAAYA0wEmBAYAPQImBAYA
HgImBAYA0AImBAYAegImBAYAkwImBAYA6gEmBAYABQIXAwoArgJXAwoAEAFXAwYAZgQKAAYA4APZ
AwYAiQGLBAYAkwXZAwYAVgS+BAYAOAQRBA4AUgGSAw4AugGSAw4ALAH8AwYAbgGeBAoAgANXAxIA
VAWxABIAeACxAAYAMQPZAwYAyAUKAAYARAQKAAYAcwQKAAYAgQDZAwYA2wDZAwYAjQDZAwYAuQUm
BAAAAAABAAAAAAABAAEAAQAQAPEDRAA5AAEAAQAAABAAxQQhBUkAAQADAAABEABeBSEFXQADAAcA
AwEAAHcFAABBAAQACgARAOUDjgARAAABkgARAGgAlgAGBjMAmgBWgGcFnQBWgOAAnQBQIAAAAACG
APcDBgABAKQkAAAAAIYYfgQGAAEArCQAAAAAgxh+BAYAAQC0JAAAAACTCFIEoQABAOAkAAAAAJMI
6ACmAAEA5yQAAAAAkwj0AKsAAQDvJAAAAACWCJoFsQACAPYkAAAAAIYYfgQGAAIA/iQAAAAAkRiE
BLYAAgAAAAEAEQMJAH4EAQARAH4EBgAZAH4ECgApAH4EEAAxAH4EEAA5AH4EEABBAH4EEABJAH4E
EABRAH4EEABZAH4EEABhAH4EEABpAH4EBgCJAH4EBgCxAH4EFQDBAH4EBgBxAG8FIwDJAFAFKADR
ANADLQDZAAcDMwDhAIwFNwDpAIUFPQDpAGcBQgDpAMIFSAB5AH4ETgD5ANEAEADhAIwFVAD5AEQB
BgABAUoBBgDJAKYFAQBxAH4EBgCRAH4EBgAJAZ8AWwAJAbUFZACZAH4EagC5AH4EBgAIABQAhAAI
ABgAiQApAHMA8QAuAAsAyQAuABMA0gAuABsA8QAuACMA+gAuACsAIwEuADMAIwEuADsAIwEuAEMA
+gAuAEsAKQEuAFMAIwEuAFsAQAFDAGMAiQBJAHMA8QBhAHsAiQBjAGsAiQAbAAMAAQAEAAMAAABW
BLoAAAAIAb8AAACeBcQAAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAADpHsk6AAAAAAAA
RAAAAAQAAAAAAAAAAAAAAHIAOwAAAAAADwAAAAAAAAAAAAAAewA4AwAAAAAEAAAAAAAAAAAAAABy
ANkDAAAAAA8AAAAAAAAAAAAAAHsAFAAAAAAAAAAAAAEAAADPBAAABQACAAAAADxNb2R1bGU+AFN5
c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBtc2NvcmxpYgBT
VF9iOTI5YWY3OGQxYzU0ZWU5OTAxODZiMTUyNDViOTVjZABkZWZhdWx0SW5zdGFuY2UAVmFyaWFi
bGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAVHlwZQBGYWlsdXJlAGdldF9DdWx0
dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJh
c2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBEZWxldGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZy
YW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2Vt
Ymx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0
VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVD
b21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJz
aW9uaW5nAFN0cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29t
cG9uZW50TW9kZWwAU1RfYjkyOWFmNzhkMWM1NGVlOTkwMTg2YjE1MjQ1Yjk1Y2QuZGxsAGdldF9J
dGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8ARGly
ZWN0b3J5SW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2I5MjlhZjc4ZDFjNTRlZTk5MDE4NmIxNTI0NWI5NWNk
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9iOTI5YWY3
OGQxYzU0ZWU5OTAxODZiMTUyNDViOTVjZC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGlu
Z3MAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMARXhpc3RzAENvbmNhdABPYmplY3QAZ2V0
X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X0Fzc2VtYmx5AENyZWF0ZURpcmVjdG9yeQAAAAA3
JABQAHIAbwBqAGUAYwB0ADoAOgBTAG4AbwB3AEYAbABhAGsAZQBGAGkAbABlAFAAYQB0AGgAABVc
AFMAUQBMAFQAbwBTAG4AbwB3AAAfXABVAHAAbABvAGEAZAAyAFMAbgBvAHcALgBwAHkAAD8kAFAA
cgBvAGoAZQBjAHQAOgA6AFMAbgBvAHcAUwBRAEwAQwBvAG4AZgBpAGcARgBpAGwAZQBQAGEAdABo
AAAPXABjAG8AbgBmAGkAZwAAKSQAUAByAG8AagBlAGMAdAA6ADoAUwBlAHIAdgBlAHIATgBhAG0A
ZQAAGWkAbQBwAG8AcgB0ACAAdABpAG0AZQAgAAApaQBtAHAAbwByAHQAIABwAGEAbgBkAGEAcwAg
AGEAcwAgAHAAZAAgAAAdaQBtAHAAbwByAHQAIABwAHkAbwBkAGIAYwAgAAA3aQBtAHAAbwByAHQA
IABzAG4AbwB3AGYAbABhAGsAZQAuAGMAbwBuAG4AZQBjAHQAbwByACAAAHNmAHIAbwBtACAAcwBu
AG8AdwBmAGwAYQBrAGUALgBjAG8AbgBuAGUAYwB0AG8AcgAuAHAAYQBuAGQAYQBzAF8AdABvAG8A
bABzACAAaQBtAHAAbwByAHQAIAB3AHIAaQB0AGUAXwBwAGEAbgBkAGEAcwAAKWkAbQBwAG8AcgB0
ACAAYwBvAG4AZgBpAGcAcABhAHIAcwBlAHIAIAAAK3QAXwBzAHQAYQByAHQAIAA9ACAAdABpAG0A
ZQAuAHQAaQBtAGUAKAApAAAbYwBvAG4AZgBpAGcAZgAgAD0AIAAoAHIAIgAAByIAKQAgAABJcABh
AHIAcwBlAHIAIAA9ACAAYwBvAG4AZgBpAGcAcABhAHIAcwBlAHIALgBDAG8AbgBmAGkAZwBQAGEA
cgBzAGUAcgAoACkAAClwAGEAcgBzAGUAcgAuAHIAZQBhAGQAKABjAG8AbgBmAGkAZwBmACkAAG1V
AHMAZQByACAAPQAgAHAAYQByAHMAZQByAC4AZwBlAHQAKAAiAGMAbwBuAG4AZQBjAHQAaQBvAG4A
cwAuAFAAcgBvAGoAZQBjAHQAMAAyACIALAAgACIAdQBzAGUAcgBuAGEAbQBlACIAKQAAeUEAYwBj
AG8AdQBuAHQAIAA9ACAAcABhAHIAcwBlAHIALgBnAGUAdAAoACIAYwBvAG4AbgBlAGMAdABpAG8A
bgBzAC4AUAByAG8AagBlAGMAdAAwADIAIgAsACAAIgBhAGMAYwBvAHUAbgB0AG4AYQBtAGUAIgAp
AAB1UABhAHMAcwB3AG8AcgBkACAAPQAgAHAAYQByAHMAZQByAC4AZwBlAHQAKAAiAGMAbwBuAG4A
ZQBjAHQAaQBvAG4AcwAuAFAAcgBvAGoAZQBjAHQAMAAyACIALAAgACIAcABhAHMAcwB3AG8AcgBk
ACIAKQAAbVIAbwBsAGUAIAA9ACAAcABhAHIAcwBlAHIALgBnAGUAdAAoACIAYwBvAG4AbgBlAGMA
dABpAG8AbgBzAC4AUAByAG8AagBlAGMAdAAwADIAIgAsACAAIgByAG8AbABlAG4AYQBtAGUAIgAp
AABxRABhAHQAYQBiAGEAcwBlACAAPQAgAHAAYQByAHMAZQByAC4AZwBlAHQAKAAiAGMAbwBuAG4A
ZQBjAHQAaQBvAG4AcwAuAFAAcgBvAGoAZQBjAHQAMAAyACIALAAgACIAZABiAG4AYQBtAGUAIgAp
AACAiUQAYQB0AGEAdwBhAHIAZQBoAG8AdQBzAGUAIAA9ACAAcABhAHIAcwBlAHIALgBnAGUAdAAo
ACIAYwBvAG4AbgBlAGMAdABpAG8AbgBzAC4AUAByAG8AagBlAGMAdAAwADIAIgAsACAAIgB3AGEA
cgBlAGgAbwB1AHMAZQBuAGEAbQBlACIAKQAAdVMAYwBoAGUAbQBhACAAPQAgAHAAYQByAHMAZQBy
AC4AZwBlAHQAKAAiAGMAbwBuAG4AZQBjAHQAaQBvAG4AcwAuAFAAcgBvAGoAZQBjAHQAMAAyACIA
LAAgACIAcwBjAGgAZQBtAGEAbgBhAG0AZQAiACkAADMjACMAIwAgAGMAbwBuAG4AZQBjAHQAIAB0
AG8AIABTAFEATAAgAFMAZQByAHYAZQByAABZYwBvAG4AbgAgAD0AIABwAHkAbwBkAGIAYwAuAGMA
bwBuAG4AZQBjAHQAKAAiAEQAcgBpAHYAZQByAD0AewBTAFEATAAgAFMAZQByAHYAZQByAH0AOwAi
AAA9IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAiAFMAZQByAHYA
ZQByAD0AAAU7ACIAAF0gACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACIARABhAHQAYQBiAGEAcwBlAD0ARwBhAG0AaQBuAGcARwByAG8AdQBwADYAOwAiAABhIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAiAFQAcgB1AHMAdABlAGQAXwBD
AG8AbgBuAGUAYwB0AGkAbwBuAD0AeQBlAHMAOwAiACkAAC1jAHUAcgBzAG8AcgAgAD0AIABjAG8A
bgBuAC4AYwB1AHIAcwBvAHIAKAApAACAlWQAZgBfAGMAbwB1AG4AdAByAHkAIAA9ACAAcABkAC4A
cgBlAGEAZABfAHMAcQBsAF8AcQB1AGUAcgB5ACgAIgBTAEUATABFAEMAVAAgACoAIABGAFIATwBN
ACAARwBhAG0AZQBCAEkALgBDAG8AdQBuAHQAcgB5AEQAZQB0AGEAaQBsAHMAIgAsAGMAbwBuAG4A
KQAAgMdkAGYAXwBjAG8AdQBuAHQAcgB5AC4ATQBvAGQAaQBmAGkAZQBkAEQAYQB0AGUAIAA9ACAA
ZABmAF8AYwBvAHUAbgB0AHIAeQAuAE0AbwBkAGkAZgBpAGUAZABEAGEAdABlAC4AYQBwAHAAbAB5
ACgAbABhAG0AYgBkAGEAIAB4ADoAIAB4AC4AcwB0AHIAZgB0AGkAbQBlACgAJwAlAFkALQAlAG0A
LQAlAGQAIAAlAEgAOgAlAE0AOgAlAFMAJwApACkAIAABgINkAGYAXwB1AHMAZQByACAAPQAgAHAA
ZAAuAHIAZQBhAGQAXwBzAHEAbABfAHEAdQBlAHIAeQAoACIAUwBFAEwARQBDAFQAIAAqACAARgBS
AE8ATQAgAEcAYQBtAGUAQgBJAC4AVQBzAGUAcgBJAG4AZgBvACIALABjAG8AbgBuACkAAIC7ZABm
AF8AdQBzAGUAcgAuAE0AbwBkAGkAZgBpAGUAZABEAGEAdABlACAAPQAgAGQAZgBfAHUAcwBlAHIA
LgBNAG8AZABpAGYAaQBlAGQARABhAHQAZQAuAGEAcABwAGwAeQAoAGwAYQBtAGIAZABhACAAeAA6
ACAAeAAuAHMAdAByAGYAdABpAG0AZQAoACcAJQBZAC0AJQBtAC0AJQBkACAAJQBIADoAJQBNADoA
JQBTACcAKQApACAAAYCJZABmAF8AZwBhAG0AZQAgAD0AIABwAGQALgByAGUAYQBkAF8AcwBxAGwA
XwBxAHUAZQByAHkAKAAiAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABHAGEAbQBlAEIASQAu
AEcAYQBtAGUARABlAHQAYQBpAGwAcwAiACwAYwBvAG4AbgApAACAu2QAZgBfAGcAYQBtAGUALgBN
AG8AZABpAGYAaQBlAGQARABhAHQAZQAgAD0AIABkAGYAXwBnAGEAbQBlAC4ATQBvAGQAaQBmAGkA
ZQBkAEQAYQB0AGUALgBhAHAAcABsAHkAKABsAGEAbQBiAGQAYQAgAHgAOgAgAHgALgBzAHQAcgBm
AHQAaQBtAGUAKAAnACUAWQAtACUAbQAtACUAZAAgACUASAA6ACUATQA6ACUAUwAnACkAKQAgAAGA
mWQAZgBfAHQAcgBhAG4AcwBhAGMAdABpAG8AbgAgAD0AIABwAGQALgByAGUAYQBkAF8AcwBxAGwA
XwBxAHUAZQByAHkAKAAiAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABHAGEAbQBlAEIASQAu
AFQAcgBhAG4AcwBhAGMAdABpAG8AbgBzACIALABjAG8AbgBuACkAAIDXZABmAF8AdAByAGEAbgBz
AGEAYwB0AGkAbwBuAC4ATQBvAGQAaQBmAGkAZQBkAEQAYQB0AGUAIAA9ACAAZABmAF8AdAByAGEA
bgBzAGEAYwB0AGkAbwBuAC4ATQBvAGQAaQBmAGkAZQBkAEQAYQB0AGUALgBhAHAAcABsAHkAKABs
AGEAbQBiAGQAYQAgAHgAOgAgAHgALgBzAHQAcgBmAHQAaQBtAGUAKAAnACUAWQAtACUAbQAtACUA
ZAAgACUASAA6ACUATQA6ACUAUwAnACkAKQAgAAE7IwAjACAAYwBsAG8AcwBlACAAYwBvAG4AbgBl
AGMAdABpAG8AbgAgAHcAaQB0AGgAIABzAHEAbAAgAAAZYwBvAG4AbgAuAGMAbABvAHMAZQAoACkA
ACsjACMAIABjAG8AbgBlAGMAdAAgAHQAbwAgAHMAbgBvAHcAIABzAHEAbAAAgItzAGMAbgBuACAA
PQAgAHMAbgBvAHcAZgBsAGEAawBlAC4AYwBvAG4AbgBlAGMAdABvAHIALgBjAG8AbgBuAGUAYwB0
ACgAdQBzAGUAcgAgAD0AIABVAHMAZQByACwAIABwAGEAcwBzAHcAbwByAGQAIAA9ACAAUABhAHMA
cwB3AG8AcgBkACwAIAAAgI0gACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQBjAGMAbwB1AG4AdAAgAD0AIABBAGMAYwBv
AHUAbgB0ACwAIAByAG8AbABlAG4AYQBtAGUAIAA9ACAAUgBvAGwAZQAsAACApSAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IABkAGEAdABhAGIAYQBzAGUAIAA9ACAARABhAHQAYQBiAGEAcwBlACwAIAB3AGEAcgBlAGgAbwB1
AHMAZQAgAD0AIABEAGEAdABhAHcAYQByAGUAaABvAHUAcwBlACwAAGcgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwBj
AGgAZQBtAGEAIAA9ACAAUwBjAGgAZQBtAGEAKQAAJWMAcwAgAD0AIABzAGMAbgBuAC4AYwB1AHIA
cwBvAHIAKAApAAAFIAAgAABNZABlAGYAIABjAGEAbABsAF8AdAByAHUAbgBjAGEAdABlACgAYwBz
ACwAIABsAG8AZwBmAGkAbABlACwAIABuAF8AZQByAHIAKQA6AAARIAAgACAAIAB0AHIAeQA6AAB3
IAAgACAAIAAgACAAIAAgAGMAcwAuAGUAeABlAGMAdQB0AGUAKAAnAFQAUgBVAE4AQwBBAFQARQAg
AFQAQQBCAEwARQAgAEcAYQBtAGUAQgBJAC4AQwBvAHUAbgB0AHIAeQBEAGUAdABhAGkAbABzADsA
JwApAAFxIAAgACAAIAAgACAAIAAgAGMAcwAuAGUAeABlAGMAdQB0AGUAKAAnAFQAUgBVAE4AQwBB
AFQARQAgAFQAQQBCAEwARQAgAEcAYQBtAGUAQgBJAC4ARwBhAG0AZQBEAGUAdABhAGkAbABzADsA
JwApAAFrIAAgACAAIAAgACAAIAAgAGMAcwAuAGUAeABlAGMAdQB0AGUAKAAnAFQAUgBVAE4AQwBB
AFQARQAgAFQAQQBCAEwARQAgAEcAYQBtAGUAQgBJAC4AVQBzAGUAcgBJAG4AZgBvADsAJwApAAFz
IAAgACAAIAAgACAAIAAgAGMAcwAuAGUAeABlAGMAdQB0AGUAKAAnAFQAUgBVAE4AQwBBAFQARQAg
AFQAQQBCAEwARQAgAEcAYQBtAGUAQgBJAC4AVAByAGEAbgBzAGEAYwB0AGkAbwBuAHMAOwAnACkA
AXkgACAAIAAgAGUAeABjAGUAcAB0ACAAcwBuAG8AdwBmAGwAYQBrAGUALgBjAG8AbgBuAGUAYwB0
AG8AcgAuAGUAcgByAG8AcgBzAC4AUAByAG8AZwByAGEAbQBtAGkAbgBnAEUAcgByAG8AcgAgAGEA
cwAgAGUAOgAAgMkgACAAIAAgACAAIAAgACAAbABvAGcAZgBpAGwAZQAuAHcAcgBpAHQAZQAoACcA
RQByAHIAbwByACAAewAwAH0AIAAgACgAewAxAH0AKQA6ACAAewAyAH0AIAAgACgAewAzAH0AKQAr
AFwAbgAnAC4AZgBvAHIAbQBhAHQAKABlAC4AZQByAHIAbgBvACwAIABlAC4AcwBxAGwAcwB0AGEA
dABlACwAIABlAC4AbQBzAGcALAAgAGUALgBzAGYAcQBpAGQAKQApAAEzIAAgACAAIAAgACAAIAAg
AG4AXwBlAHIAcgAgAD0AIABuAF8AZQByAHIAIAArACAAMQAAISAAIAAgACAAcgBlAHQAdQByAG4A
IABuAF8AZQByAHIAAAMgAACApWQAZQBmACAAdQBwAGwAbwBhAGQAMgBzAG4AbwB3ACgAZABmACwA
IABzAGMAbgBuACwAIABsAG8AZwBmAGkAbABlACwAIABuAF8AZQByAHIALAAgAGQAYQB0AGEAYgBh
AHMAZQAsACAAcwBjAGgAZQBtAGEALAAgAHQAYQBiAGwAZQBfAG4AYQBtAGUALAAgAHQAbwB0AF8A
cgBvAHcAcwApADoAAFkgACAAIAAgAHMAdQBjAGMAZQBzAHMALAAgAG4AXwBjAGgAdQBuAGsAcwAs
ACAAbgBfAHIAbwB3AHMAIAA9ACAARgBhAGwAcwBlACwAIAAwACwAIAAwACAAAICVIAAgACAAIAAg
ACAAIAAgAHMAdQBjAGMAZQBzAHMALAAgAG4AXwBjAGgAdQBuAGsAcwAsACAAbgBfAHIAbwB3AHMA
LAAgAF8AIAA9ACAAdwByAGkAdABlAF8AcABhAG4AZABhAHMAKABzAGMAbgBuACwAIABkAGYALAAg
AHQAYQBiAGwAZQBfAG4AYQBtAGUALAAgAACAnyAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IABjAGgAdQBuAGsAXwBzAGkAegBlAD0AMQAwADAALAAgAGQAYQB0AGEAYgBhAHMAZQA9AGQAYQB0
AGEAYgBhAHMAZQAsACAAAICtIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHMAYwBoAGUA
bQBhACAAPQAgAHMAYwBoAGUAbQBhACwAIABxAHUAbwB0AGUAXwBpAGQAZQBuAHQAaQBmAGkAZQBy
AHMAIAA9AEYAYQBsAHMAZQApAACAxSAAIAAgACAAbABvAGcAZgBpAGwAZQAuAHcAcgBpAHQAZQAo
ACcATABvAGEAZAAgAHQAYQBiAGwAZQAgAHMAdABhAHQAdQBzACAAJwArAHQAYQBiAGwAZQBfAG4A
YQBtAGUAKwAnADoAewAwAH0AIAB3AGkAdABoACAAewAxAH0AIAByAG8AdwBzACAAXABuACcALgBm
AG8AcgBtAGEAdAAoAHMAdQBjAGMAZQBzAHMALAAgAG4AXwByAG8AdwBzACkAKQABQyAAIAAgACAA
cgBlAHQAdQByAG4AIABuAF8AZQByAHIALAAgAHQAbwB0AF8AcgBvAHcAcwArAG4AXwByAG8AdwBz
AAA1aQBmACAAXwBfAG4AYQBtAGUAXwBfACAAPQA9ACAAJwBfAF8AbQBhAGkAbgBfAF8AJwA6AAEb
IAAgACAAIABuAF8AZQByAHIAIAA9ACAAMAAAJSAAIAAgACAAdABvAHQAYQBsAF8AcgBvAHcAcwAg
AD0AIAAwAABNIAAgACAAIAB3ACAAPQAgAG8AcABlAG4AKAAgACcATABvAGcAUwBuAG8AdwBVAHAA
bABvAGEAZAAuAGwAbwBnACcALAAnAHcAJwApAAFPIAAgACAAIABuAF8AZQByAHIAIAA9ACAAYwBh
AGwAbABfAHQAcgB1AG4AYwBhAHQAZQAoAGMAcwAsACAAdwAsACAAbgBfAGUAcgByACkAAFkgACAA
IAAgAHAAcgBpAG4AdAAoACcATABvAGEAZABpAG4AZwAgAGQAYQB0AGEAIABpAG4AdABvACAAUwBu
AG8AdwBGAGwAYQBrAGUAIAAuAC4ALgAnACkAAYDfIAAgACAAIABuAF8AZQByAHIALAAgAHQAbwB0
AGEAbABfAHIAbwB3AHMAIAA9ACAAdQBwAGwAbwBhAGQAMgBzAG4AbwB3ACgAZABmAF8AYwBvAHUA
bgB0AHIAeQAsACAAcwBjAG4AbgAsACAAdwAsACAAbgBfAGUAcgByACwAIABEAGEAdABhAGIAYQBz
AGUALAAgAFMAYwBoAGUAbQBhACwAIAAnAEMAbwB1AG4AdAByAHkARABlAHQAYQBpAGwAcwAnACwA
IAB0AG8AdABhAGwAXwByAG8AdwBzACkAAYDTIAAgACAAIABuAF8AZQByAHIALAAgAHQAbwB0AGEA
bABfAHIAbwB3AHMAIAA9ACAAdQBwAGwAbwBhAGQAMgBzAG4AbwB3ACgAZABmAF8AZwBhAG0AZQAs
ACAAcwBjAG4AbgAsACAAdwAsACAAbgBfAGUAcgByACwAIABEAGEAdABhAGIAYQBzAGUALAAgAFMA
YwBoAGUAbQBhACwAIAAnAEcAYQBtAGUARABlAHQAYQBpAGwAcwAnACwAIAB0AG8AdABhAGwAXwBy
AG8AdwBzACkAAYDNIAAgACAAIABuAF8AZQByAHIALAAgAHQAbwB0AGEAbABfAHIAbwB3AHMAIAA9
ACAAdQBwAGwAbwBhAGQAMgBzAG4AbwB3ACgAZABmAF8AdQBzAGUAcgAsACAAcwBjAG4AbgAsACAA
dwAsACAAbgBfAGUAcgByACwAIABEAGEAdABhAGIAYQBzAGUALAAgAFMAYwBoAGUAbQBhACwAIAAn
AFUAcwBlAHIASQBuAGYAbwAnACwAIAB0AG8AdABhAGwAXwByAG8AdwBzACkAAYDjIAAgACAAIABu
AF8AZQByAHIALAAgAHQAbwB0AGEAbABfAHIAbwB3AHMAIAA9ACAAdQBwAGwAbwBhAGQAMgBzAG4A
bwB3ACgAZABmAF8AdAByAGEAbgBzAGEAYwB0AGkAbwBuACwAIABzAGMAbgBuACwAIAB3ACwAIABu
AF8AZQByAHIALAAgAEQAYQB0AGEAYgBhAHMAZQAsACAAUwBjAGgAZQBtAGEALAAgACcAVAByAGEA
bgBzAGEAYwB0AGkAbwBuAHMAJwAsACAAdABvAHQAYQBsAF8AcgBvAHcAcwApAAEhIAAgACAAIABz
AGMAbgBuAC4AYwBsAG8AcwBlACgAKQAAgN8gACAAIAAgAHAAcgBpAG4AdAAoACcAVQBwAGwAbwBh
AGQAIAB7ADIAfQAgAHIAbwB3AHMAIABkAG8AbgBlACAAaQBuACAAewAwADoALgAyAGYAfQAgAHMA
IAB3AGkAdABoACAAewAxAH0AIABlAHIAcgBvAHIAcwAnAC4AZgBvAHIAbQBhAHQAKAAoAHQAaQBt
AGUALgB0AGkAbQBlACgAKQAtAHQAXwBzAHQAYQByAHQAKQAsACAAbgBfAGUAcgByACwAIAB0AG8A
dABhAGwAXwByAG8AdwBzACkAKQABgOMgACAAIAAgAHcALgB3AHIAaQB0AGUAKAAnAFUAcABsAG8A
YQBkACAAewAyAH0AIAByAG8AdwBzACAAZABvAG4AZQAgAGkAbgAgAHsAMAA6AC4AMgBmAH0AIABz
ACAAdwBpAHQAaAAgAHsAMQB9ACAAZQByAHIAbwByAHMAJwAuAGYAbwByAG0AYQB0ACgAKAB0AGkA
bQBlAC4AdABpAG0AZQAoACkALQB0AF8AcwB0AGEAcgB0ACkALAAgAG4AXwBlAHIAcgAsACAAdABv
AHQAYQBsAF8AcgBvAHcAcwApACkAARsgACAAIAAgAHcALgBjAGwAbwBzAGUAKAApAABxUwBUAF8A
YgA5ADIAOQBhAGYANwA4AGQAMQBjADUANABlAGUAOQA5ADAAMQA4ADYAYgAxADUAMgA0ADUAYgA5
ADUAYwBkAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAA8XD/CtTk
aUCxoU36GnW3ogAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERVQcHBA4ODhI9BCAAEmUEIAASaQUg
ARJtHAMgABwFAAIODg4EAAECDgUAAgEOAgUAARJ5DgUgAgEOAgYAAw4ODg4IAAESgIURgIkFIAAS
gI0HIAIBDhKAjQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJNAwYSUQMGEhACBggDBhEU
BAAAEk0EAAASUQUAAQESUQQAABIQAwAAAQQIABJNBAgAElEECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYjkyOWFmNzhkMWM1NGVlOTkw
MTg2YjE1MjQ1Yjk1Y2QAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAAAAUQAAAAAAAAAAAAAaUQAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAADFEAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAA
AAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
yTrpHgAAAQDJOukePwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgAB
AAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAA
AAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBiADkAMgA5
AGEAZgA3ADgAZAAxAGMANQA0AGUAZQA5ADkAMAAxADgANgBiADEANQAyADQANQBiADkANQBjAGQA
AAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA5ADEAMwAuADEANQAw
ADQAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBiADkAMgA5AGEA
ZgA3ADgAZAAxAGMANQA0AGUAZQA5ADkAMAAxADgANgBiADEANQAyADQANQBiADkANQBjAGQALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGIA
OQAyADkAYQBmADcAOABkADEAYwA1ADQAZQBlADkAOQAwADEAOAA2AGIAMQA1ADIANAA1AGIAOQA1
AGMAZAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBiADkA
MgA5AGEAZgA3ADgAZAAxAGMANQA0AGUAZQA5ADkAMAAxADgANgBiADEANQAyADQANQBiADkANQBj
AGQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAOQAxADMA
LgAxADUAMAA0ADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADcAOQAxADMALgAxADUAMAA0ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAALDEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Run Py_SQL_To_Snow"
      DTS:CreationName="Microsoft.ExecuteProcess"
      DTS:DelayValidation="True"
      DTS:Description="Execute Process Task"
      DTS:DTSID="{C1DDB414-3D50-4883-BB64-8F2ACC90C86E}"
      DTS:ExecutableType="Microsoft.ExecuteProcess"
      DTS:LocaleID="-1"
      DTS:ObjectName="Run Py_SQL_To_Snow"
      DTS:TaskContact="Execute Process Task;Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="Arguments">"Upload2Snow.py"</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="DelayValidation">(DT_BOOL)"TRUE"</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Executable">@[$Project::PythonexePath]+"\\python.exe"</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="WorkingDirectory">@[$Project::SnowFlakeFilePath]+"\\SQLToSnow"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <ExecuteProcessData
          Executable="C:\Users\KhangNHN\AppData\Local\Programs\Python\Python39\python.exe"
          Arguments="Upload2Snow.py"
          WorkingDirectory="E:\training_document_data2021\week456-miniproject\project02\debug_folder\python_debug\Working-Folder\SQLToSnow" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{53AE5C98-C7DF-4418-9B4A-E5E583F1BF21}"
      DTS:From="Package\Create python sript to upload"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Run Py_SQL_To_Snow" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="217,42"
          Id="Package\Create python sript to upload"
          TopLeft="5.50000000000001,5.5" />
        <NodeLayout
          Size="186,42"
          Id="Package\Run Py_SQL_To_Snow"
          TopLeft="21,107.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="114,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>